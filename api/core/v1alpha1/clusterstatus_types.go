package v1alpha1

import (
	"fmt"

	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/yaml"
)

type ClusterStatus struct {
	// Shoot contains the shoot manifest generated by the controller.
	// +kubebuilder:pruning:PreserveUnknownFields
	// +optional
	Shoot *runtime.RawExtension `json:"shoot,omitempty"`
}

// GetShoot returns the shoot in the ClusterStatus as unstructured object.
// Returns nil if no shoot is contained in the ClusterStatus.
func (cs *ClusterStatus) GetShoot() (*unstructured.Unstructured, error) {
	if cs == nil || cs.Shoot == nil {
		return nil, nil
	}
	if cs.Shoot.Object != nil {
		// this is mostly relevant for tests
		uShoot, ok := cs.Shoot.Object.(*unstructured.Unstructured)
		if ok {
			return uShoot, nil
		}
	}
	if cs.Shoot.Raw != nil {
		uShoot := &unstructured.Unstructured{}
		if err := yaml.Unmarshal(cs.Shoot.Raw, uShoot); err != nil {
			return nil, fmt.Errorf("failed to unmarshal shoot: %w", err)
		}
		return uShoot, nil
	}
	return nil, nil
}
